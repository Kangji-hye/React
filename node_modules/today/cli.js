#!/usr/bin/env node

'use strict';

const inquirer = require('inquirer');
const chalk = require('chalk');
const _ = require('lodash');
const fecha = require('fecha');
const api = require('./lib');

let args = process.argv.slice(2);
let now = new Date();
let today = fecha.format(now,'dddd').toLowerCase();

global.STATE = {
    sound: 'No Sound',
    notificationTimeout: 60
};

// TODO: output some useful information about today (news, weather, sports)
// AND about the system where relevant (time, date, etc)
// https://en.wikipedia.org/wiki/September_9
//

switch(args[0]) {
    case 'help': // docs
        break;
    case 'share': // publish to common calendar (google spreadsheet?)
        break;
    case 'sound':
    case 'sounds':
        inquirer
        .prompt([{
            type: 'list',
            name: 'sound',
            message: 'Choose sound played when notification appears',
            choices: ["No Sound", "Basso", "Blow", "Bottle", "Frog", "Funk", "Glass", "Hero", "Morse", "Ping", "Pop", "Purr", "Sosumi", "Submarine", "Tink"],
            default: STATE.sound
        }])
        .then(answer => {
            if(answer.sound === 'No Sound') {
                return;
            }
            STATE.sound = answer.sound;
        });
        break;
    case 'notificationTimeout':
        inquirer
        .prompt([{
            type: 'input',
            name: 'notificationTimeout',
            message: 'How many SECONDS should notifications stick around for?',
            default: STATE.notificationTimeout
        }])
        .then(answer => {
            if(answer.sound === 'No Sound') {
                return;
            }
            STATE.notificationTimeout = answer.notificationTimeout;
        });
        break;
    default:
        // `today` w/ 0 args provides the standard input prompt
        //
        ask(responder);
        break;
}

const commands = {
    // Returns the currently scheduled items
    //
    scheduled: () => api.scheduled().then(list => {
        list = list.map(item => ` • ${item}`);
        list.length ? console.log(list.join('\n')) : console.log(`Nothing scheduled.`);
    }).catch(err => console.log(`Can't get schedule. If this persists please file a bug at https://github.com/sandro-pasquali/today/issues`)),

    clear: () => api.scheduled().then(list => {
        if(!list.length) {
            return console.log(`No scheduled items.`);
        }
        return inquirer.prompt({
            message: 'Select scheduled item to clear',
            type: 'list',
            name: 'doomed',
            default: 0,
            choices: ['Cancel'].concat(list)
        }).then(answer => {
            if(answer.doomed !== 'Cancel') {
                api.clear(answer.doomed);
            }
        })
    })
};

function ask(cb) {

    inquirer.prompt({
        prefix: chalk.inverse(` • ${fecha.format(now, 'dddd h:mma')} • `),
        type: 'input',
        name: 'text',
        message: '\x00'

    }).then(answer => {

        answer = answer.text.trim();

        if(!answer) {
            process.exit(0);
        }

        // Short circuit if a command.
        //
        if(~Object.keys(commands).indexOf(answer)) {
           return commands[answer](args.slice(1)).then(() => ask(responder));
        }

        cb && cb(answer);
    });
}

function responder(answer) {
    api.parse(answer).then(resp => {
        resp = _.isPlainObject(resp) ? resp : {};

        if(resp.error) {
            console.log(chalk.bgRed.bold.yellow(`\n ${resp} \n`));
        } else if(resp.message) {
            console.log(chalk.bold.inverse(` ${resp.message} `));
        }

        // User exits by hitting ENTER; keep asking until then.
        //
        ask(responder);
    });
}