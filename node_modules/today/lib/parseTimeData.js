'use strict';

const _ = require('lodash');

module.exports = data => {

    let prefix = 'ok. ';
    let now = new Date();
    let currentHour = now.getHours();
    let currentMinutes = now.getMinutes();
    let minutes;
    let maybeLater;
    let logic;

    // 30 minutes from now is default. Assume non-fixed time.
    //
    let targetTime = 1000*60*30;
    let message = `I'll remind you in about 30 minutes`;
    let fixedTime = false;

    console.log('DATE**:', JSON.stringify(data, null, 4));

    if(data[0]
        && _.isPlainObject(data[0].date)
        && _.isPlainObject(data[0].date.time)
        && data[0].date.time.hour !== null) {

        // -5 on minutes so that we can notify at least 5 before targetTime
        //
        minutes = (+data[0].date.time.minute || 0) -5;
        maybeLater = +data[0].date.time.hour - currentHour;

        if(maybeLater === 0) {
            if(minutes && (minutes > currentMinutes)) {
                message = `I'll remind you in about ${minutes - currentMinutes} minutes`;
                targetTime = 1000*60*(minutes - currentMinutes);
                fixedTime = true;
            }
        } else if(maybeLater > 0) {
            targetTime = 1000*60*60*maybeLater + (minutes > currentMinutes ? minutes - currentMinutes : 0);
            message = data[0].normal;
            fixedTime = true;
        }

        // if < 0 this is a time in the past; assume user knows what
        // they're doing and we're wrong and just use default item notification.
        //

        logic = data[0].date.time.logic;

    } else {

        // TODO: Can we run these through a grammar parser
        // to find keywords like 'tonight' or 'in a few minutes'??
        //
        if(data.normal) {

            message = `?? ${data.normal}`;

        } else if(_.isPlainObject(data.date) && data.date.named) {

            message = data.date.named;

        }
    }

    return {
        message: prefix + message,
        targetTime,
        fixedTime
    }
};
